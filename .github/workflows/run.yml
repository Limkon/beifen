name: fetch-website-content

on:
  workflow_dispatch:
  
  schedule:
    - cron: '0 23 * * *'

jobs:
  fetch-website-content:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 代码库
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: 安装 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 安装依赖
        run: npm install puppeteer moment

      - name: 读取链接
        run: cat urls > urls_tmp

      - name: 调用 read_website.js
        run: node read_website.js

      - name: 爬取网页
        id: fetch-webpage
        run: |
          urls=$(cat url2)
          for url in $urls; do
            # 解析文件名
            filename=$(echo "$url" | awk -F/ '{ print $3 }')
            timestamp=$(date +'%Y%m%d%H%M%S')
            filepath="data/${filename}_${timestamp}.txt"
            
            # 检查链接是否可以访问
            if ! curl --output /dev/null --silent --head --fail "$url"; then
              echo "Skipping URL: $url, unable to access."
              continue
            fi
            
            # 使用 puppeteer 爬取网页
            node -e "const puppeteer = require('puppeteer');const moment = require('moment');const fs = require('fs');
            async function main() {
              const url = '$url';
              const filepath = '$filepath';
              try {
                const browser = await puppeteer.launch({ headless: 'new' });
                const page = await browser.newPage();
                await page.goto(url, { timeout: 10000 });
                const content = await page.content();
                fs.writeFileSync(filepath, content);
                await browser.close();
                console.log('URL ${url} saved to file ${filepath}.');
              } catch (error) {
                console.error('Error occurred while fetching website:', error);
              }
            }
            main();" "$url" "$filepath"
          done
        # 如果出错则标记为失败，并提示错误信息
        continue-on-error: true
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
        # 可以使用这个命令来将报错信息发送到 pull request 上，方便开发者查看
        # run: curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
        # -d '{"event_type": "error", "client_payload": {"message": "Workflow Failed! See logs for details."}}' \
        # https://api.github.com/repos/${{ github.repository }}/dispatches

      - name: 设置 Git 配置
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: 拉取远程仓库的更改
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Pull latest changes from remote repository"
          commit_options: "--no-verify"
          branch: ${{ github.head_ref }}

      - name: 提交文件到主分支
        continue-on-error: true
        run: |
          git add data
          git commit -m 'Add website content'
          git push origin HEAD:${{ github.head_ref }}
